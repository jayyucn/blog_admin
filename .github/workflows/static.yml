# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          # Set always-auth in npmrc.
          always-auth: true# optional, default is false
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          #node-version: # optional
          # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
          #node-version-file: # optional
          # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
          #architecture: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec.
          #check-latest: # optional
          # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
          #registry-url: # optional
          # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
          #scope: # optional
          # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
          #cache: # optional
          # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
          #cache-dependency-path: # optional
      - name: Vite Github Pages Deployer
  # You may pin to the exact commit or the version.
  # uses: skywarth/vite-github-pages-deployer@b3605fe88b6949cd7095af46764c243e1805cf49
        uses: skywarth/vite-github-pages-deployer@v1.3.0
        with:
          # Public base path string for vite, this affects the routing, history and asset links. Make sure to provide appropriately since Github Pages stores your app in a directory under a subdomain.
          # public_base_path: # optional, default is 
          # Which folder do you want your Github Page to use as root directory. Usually it is your build output directory such as ./dist 
          # build_path: # optional, default is ./dist
          # Node env that will be used for the installation of dependencies. It is imperative you use an environment that has 'vite' as dependency. Commonly, that is 'dev'.
          # install_phase_node_env: # optional, default is dev
          # Node env that will be used for build phase.
          # build_phase_node_env: # optional, default is production
          # Your preference of package manager: 'npm' and 'yarn' are possible values.
          package_manager: pnpm# optional, default is npm
          # Desired name for the Deployment environment. It is also the exposed artifact name which contains the build output (dist).
          # artifact_name: # optional, default is github-pages
          # Controls the debug mode, boolean, true is for on. When turned on, it'll output certain information on certain steps. Mainly used for development, but use it as you please to inspect your env and variables.
          # debug_mode: # optional, default is false
             
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
